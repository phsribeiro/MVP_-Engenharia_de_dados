{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "8a05001c-05c2-4ba0-9fb1-f2f5913a8fec",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\n|      DATA|kW_CHILLER1|TR_CHILLER1|CARGA_CHILLER1|kW_CHILLER2|TR_CHILLER2|CARGA_CHILLER2|kW_CHILLER3|TR_CHILLER3|CARGA_CHILLER3|TEMP_EXTERNA|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\n|2025-01-01|     1441.4|     1620.0|         50.28|      141.2|      130.5|         51.85|     1298.1|     1663.9|         54.59|       28.07|\n|2025-01-02|     2684.6|     2481.4|         80.04|     2583.6|     2361.5|         82.45|     2379.5|     2708.1|         86.61|       30.21|\n|2025-01-03|     2700.7|     2408.5|         79.37|     2625.1|     2310.9|         80.55|     2364.7|     2604.6|         84.38|       30.15|\n|2025-01-04|     1655.8|     1487.9|         49.65|     2981.5|     2447.1|         96.96|     2859.1|     2804.9|         94.47|        32.4|\n|2025-01-05|     2074.6|     1945.1|         78.85|     1998.0|     1847.7|         80.08|     1856.3|     2081.6|          81.2|       30.17|\n|2025-01-06|     2701.1|     2438.8|         85.13|     2576.6|     2347.2|         87.08|     2275.2|     2610.9|         84.17|       30.41|\n|2025-01-07|     2537.2|     2401.9|         77.89|     2451.0|     2276.5|         82.95|     2230.9|     2557.6|         80.92|       28.72|\n|2025-01-08|     2613.4|     2390.5|         81.18|     2480.5|     2263.1|         82.95|     2236.5|     2570.7|         81.93|        28.9|\n|2025-01-09|     1892.8|     2141.6|         60.76|     1804.5|     1957.9|         66.83|     1768.7|     2234.1|         60.05|       25.72|\n|2025-01-10|     2041.8|     2066.5|         63.07|     2084.3|     2094.8|         72.56|     1969.2|     2319.6|         70.47|       28.38|\n|2025-01-11|     2098.6|     2161.3|         61.28|     2026.1|     2081.0|         74.22|     1921.2|     2317.3|         63.72|       27.83|\n|2025-01-12|     1618.6|     1778.3|         60.52|     1170.4|     1272.1|         61.35|     1413.4|     1814.8|          65.5|       26.95|\n|2025-01-13|     1707.4|     1940.5|         52.05|     1582.3|     1782.7|         58.89|     1581.3|     2045.2|         65.61|        25.3|\n|2025-01-14|     1672.0|     1797.0|         54.53|     1609.8|     1818.1|         57.55|     1652.1|     2088.8|         59.15|       25.41|\n|2025-01-15|     1940.8|     1943.5|         65.36|     1790.7|     1891.7|         66.08|     1762.2|     2164.2|          71.1|       26.93|\n|2025-01-16|     2805.4|     2705.5|         89.65|     2609.9|     2500.6|         84.41|     1969.2|      195.1|          88.9|       32.32|\n|2025-01-17|     2908.2|     2450.0|         84.54|     2669.9|     2433.5|         82.79|     2502.4|     2656.4|         82.89|        32.1|\n|2025-01-18|     2884.7|     2381.7|         82.33|     2700.2|     2374.5|         79.45|     2596.2|     2681.7|          82.3|       32.93|\n|2025-01-19|     2273.7|     1900.6|         83.37|     2072.7|     1854.1|         84.54|     1927.6|     2065.6|         82.51|       33.05|\n|2025-01-20|     2743.1|     2285.8|         82.53|     2556.8|     2262.0|         78.03|     2386.6|     2516.4|         79.76|       33.87|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\nonly showing top 20 rows\n\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Carregar o CSV com delimitador personalizado\n",
    "df = spark.read.option(\"delimiter\", \";\").csv(\"/FileStore/tables/Eficiencia_HVAC.csv\", header=True, inferSchema=True)\n",
    "\n",
    "# Exibir as primeiras linhas\n",
    "df.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ae0965ac-1205-42d2-bc58-bff58d2acb9b",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Out[34]: DataFrame[]"
     ]
    }
   ],
   "source": [
    "# Criar o banco de dados\n",
    "spark.sql(\"CREATE DATABASE IF NOT EXISTS Banco_de_dados_eficiencia\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "a392384d-f2cb-4bd0-8483-e14a27293744",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Selecionar o banco de dados\n",
    "spark.sql(\"USE Banco_de_dados_eficiencia\")\n",
    "\n",
    "# Salvar o DataFrame como uma tabela permanente no banco de dados\n",
    "df.write.saveAsTable(\"Eficiencia_HVAC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e9c0f417-3313-4204-bad6-12bb699e8729",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+---------------+-----------+\n|            database|      tableName|isTemporary|\n+--------------------+---------------+-----------+\n|banco_de_dados_ef...|eficiencia_hvac|      false|\n+--------------------+---------------+-----------+\n\n"
     ]
    }
   ],
   "source": [
    "# Listar as tabelas no banco de dados\n",
    "spark.sql(\"SHOW TABLES IN Banco_de_dados_eficiencia\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "892e657f-3875-484a-a963-a8614ee68b25",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\n|      DATA|kW_CHILLER1|TR_CHILLER1|CARGA_CHILLER1|kW_CHILLER2|TR_CHILLER2|CARGA_CHILLER2|kW_CHILLER3|TR_CHILLER3|CARGA_CHILLER3|TEMP_EXTERNA|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\n|2025-01-01|     1441.4|     1620.0|         50.28|      141.2|      130.5|         51.85|     1298.1|     1663.9|         54.59|       28.07|\n|2025-01-02|     2684.6|     2481.4|         80.04|     2583.6|     2361.5|         82.45|     2379.5|     2708.1|         86.61|       30.21|\n|2025-01-03|     2700.7|     2408.5|         79.37|     2625.1|     2310.9|         80.55|     2364.7|     2604.6|         84.38|       30.15|\n|2025-01-04|     1655.8|     1487.9|         49.65|     2981.5|     2447.1|         96.96|     2859.1|     2804.9|         94.47|        32.4|\n|2025-01-05|     2074.6|     1945.1|         78.85|     1998.0|     1847.7|         80.08|     1856.3|     2081.6|          81.2|       30.17|\n|2025-01-06|     2701.1|     2438.8|         85.13|     2576.6|     2347.2|         87.08|     2275.2|     2610.9|         84.17|       30.41|\n|2025-01-07|     2537.2|     2401.9|         77.89|     2451.0|     2276.5|         82.95|     2230.9|     2557.6|         80.92|       28.72|\n|2025-01-08|     2613.4|     2390.5|         81.18|     2480.5|     2263.1|         82.95|     2236.5|     2570.7|         81.93|        28.9|\n|2025-01-09|     1892.8|     2141.6|         60.76|     1804.5|     1957.9|         66.83|     1768.7|     2234.1|         60.05|       25.72|\n|2025-01-10|     2041.8|     2066.5|         63.07|     2084.3|     2094.8|         72.56|     1969.2|     2319.6|         70.47|       28.38|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+\n\n"
     ]
    }
   ],
   "source": [
    "# Consultar a tabela \"Eficiencia_HVAC\"\n",
    "spark.sql(\"SELECT * FROM Banco_de_dados_eficiencia.Eficiencia_HVAC LIMIT 10\").show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "58060b17-6ffe-4d2d-9b6b-1ea55a4bc094",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+--------------+--------------+--------------+\n|      DATA|kW_CHILLER1|TR_CHILLER1|CARGA_CHILLER1|kW_CHILLER2|TR_CHILLER2|CARGA_CHILLER2|kW_CHILLER3|TR_CHILLER3|CARGA_CHILLER3|TEMP_EXTERNA|KW_TR_CHILLER1|KW_TR_CHILLER2|KW_TR_CHILLER3|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+--------------+--------------+--------------+\n|2025-01-01|     1441.4|     1620.0|         50.28|      141.2|      130.5|         51.85|     1298.1|     1663.9|         54.59|       28.07|          0.89|          1.08|          0.78|\n|2025-01-02|     2684.6|     2481.4|         80.04|     2583.6|     2361.5|         82.45|     2379.5|     2708.1|         86.61|       30.21|          1.08|          1.09|          0.88|\n|2025-01-03|     2700.7|     2408.5|         79.37|     2625.1|     2310.9|         80.55|     2364.7|     2604.6|         84.38|       30.15|          1.12|          1.14|          0.91|\n|2025-01-04|     1655.8|     1487.9|         49.65|     2981.5|     2447.1|         96.96|     2859.1|     2804.9|         94.47|        32.4|          1.11|          1.22|          1.02|\n|2025-01-05|     2074.6|     1945.1|         78.85|     1998.0|     1847.7|         80.08|     1856.3|     2081.6|          81.2|       30.17|          1.07|          1.08|          0.89|\n|2025-01-06|     2701.1|     2438.8|         85.13|     2576.6|     2347.2|         87.08|     2275.2|     2610.9|         84.17|       30.41|          1.11|          1.10|          0.87|\n|2025-01-07|     2537.2|     2401.9|         77.89|     2451.0|     2276.5|         82.95|     2230.9|     2557.6|         80.92|       28.72|          1.06|          1.08|          0.87|\n|2025-01-08|     2613.4|     2390.5|         81.18|     2480.5|     2263.1|         82.95|     2236.5|     2570.7|         81.93|        28.9|          1.09|          1.10|          0.87|\n|2025-01-09|     1892.8|     2141.6|         60.76|     1804.5|     1957.9|         66.83|     1768.7|     2234.1|         60.05|       25.72|          0.88|          0.92|          0.79|\n|2025-01-10|     2041.8|     2066.5|         63.07|     2084.3|     2094.8|         72.56|     1969.2|     2319.6|         70.47|       28.38|          0.99|          0.99|          0.85|\n+----------+-----------+-----------+--------------+-----------+-----------+--------------+-----------+-----------+--------------+------------+--------------+--------------+--------------+\nonly showing top 10 rows\n\n+--------------------+--------------------+-----------+\n|            database|           tableName|isTemporary|\n+--------------------+--------------------+-----------+\n|banco_de_dados_ef...|      chiller1_kw_tr|      false|\n|banco_de_dados_ef...|chiller1_kw_tr_co...|      false|\n|banco_de_dados_ef...|     eficiencia_hvac|      false|\n|banco_de_dados_ef...|  kw_tr_calc_por_dia|      false|\n+--------------------+--------------------+-----------+\n\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import functions as F\n",
    "\n",
    "# Carregar a tabela com todos os dados \n",
    "df = spark.sql(\"SELECT * FROM Banco_de_dados_eficiencia.Eficiencia_HVAC\")\n",
    "\n",
    "# Calcular KW/TR para cada chiller\n",
    "df_calculado = df.withColumn(\n",
    "    \"KW_TR_CHILLER1\", \n",
    "    (F.col(\"kW_CHILLER1\") / F.col(\"TR_CHILLER1\")).cast(\"decimal(10, 2)\")\n",
    ").withColumn(\n",
    "    \"KW_TR_CHILLER2\", \n",
    "    (F.col(\"kW_CHILLER2\") / F.col(\"TR_CHILLER2\")).cast(\"decimal(10, 2)\")\n",
    ").withColumn(\n",
    "    \"KW_TR_CHILLER3\", \n",
    "    (F.col(\"kW_CHILLER3\") / F.col(\"TR_CHILLER3\")).cast(\"decimal(10, 2)\")\n",
    ")\n",
    "\n",
    "# Exibir os primeiros dados para verificar\n",
    "df_calculado.show(10)\n",
    "\n",
    "# Salvar a tabela com os resultados dos cálculos no banco de dados\n",
    "df_calculado.write.mode(\"overwrite\").saveAsTable(\"Banco_de_dados_eficiencia.KW_TR_Calc_por_Dia\")\n",
    "\n",
    "# Verificar se a tabela foi criada com sucesso\n",
    "spark.sql(\"SHOW TABLES IN Banco_de_dados_eficiencia\").show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "48d9768b-0568-468c-90fb-def4671e325b",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+--------------------+--------------------+--------------------+\n|  month|KW_TR_Medio_Chiller1|KW_TR_Medio_Chiller2|KW_TR_Medio_Chiller3|\n+-------+--------------------+--------------------+--------------------+\n|2025-01|  1.0756465482708963|  1.0694212103484875|   1.183410682686295|\n|2025-02|  1.2613782949316412|   1.161539585732078|  0.9873906355027052|\n|2025-03|  1.2756918884230966|  1.0547490246811275|  0.8402722487155333|\n+-------+--------------------+--------------------+--------------------+\n\n+--------------------+--------------------+-----------+\n|            database|           tableName|isTemporary|\n+--------------------+--------------------+-----------+\n|banco_de_dados_ef...|      chiller1_kw_tr|      false|\n|banco_de_dados_ef...|chiller1_kw_tr_co...|      false|\n|banco_de_dados_ef...|     eficiencia_hvac|      false|\n|banco_de_dados_ef...|  kw_tr_calc_por_dia|      false|\n|banco_de_dados_ef...| kw_tr_media_por_mes|      false|\n+--------------------+--------------------+-----------+\n\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import functions as F\n",
    "\n",
    "# Carregar a tabela com os dados \n",
    "df = spark.sql(\"SELECT * FROM Banco_de_dados_eficiencia.Eficiencia_HVAC\")\n",
    "\n",
    "# Adicionar a coluna de mês a partir da coluna de data\n",
    "df_with_month = df.withColumn(\"month\", F.date_format(\"DATA\", \"yyyy-MM\"))\n",
    "\n",
    "# Calcular KW/TR médio por mês para cada chiller\n",
    "df_media_kw_tr = df_with_month.groupBy(\"month\").agg(\n",
    "    F.avg(F.col(\"kW_CHILLER1\") / F.col(\"TR_CHILLER1\")).alias(\"KW_TR_Medio_Chiller1\"),\n",
    "    F.avg(F.col(\"kW_CHILLER2\") / F.col(\"TR_CHILLER2\")).alias(\"KW_TR_Medio_Chiller2\"),\n",
    "    F.avg(F.col(\"kW_CHILLER3\") / F.col(\"TR_CHILLER3\")).alias(\"KW_TR_Medio_Chiller3\")\n",
    ")\n",
    "\n",
    "# Exibir os primeiros resultados para verificar\n",
    "df_media_kw_tr.show(10)\n",
    "\n",
    "# Salvar a tabela com as médias no banco de dados\n",
    "df_media_kw_tr.write.mode(\"overwrite\").saveAsTable(\"Banco_de_dados_eficiencia.KW_TR_Media_Por_Mes\")\n",
    "\n",
    "# Verificar se a tabela foi criada com sucesso\n",
    "spark.sql(\"SHOW TABLES IN Banco_de_dados_eficiencia\").show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "implicitDf": true,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e67f4220-8316-44c0-8e0b-d2ea7498ff3e",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>month</th><th>Chiller</th><th>KW_TR_Medio</th></tr></thead><tbody><tr><td>2025-03</td><td>Chiller3</td><td>0.8402722487155333</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "2025-03",
         "Chiller3",
         0.8402722487155333
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "month",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "Chiller",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "KW_TR_Medio",
         "type": "\"double\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%sql\n",
    "\n",
    "-- Explicação: Unificar os dados: A CTE DadosUnificados transforma os valores de KW/TR de cada chiller em linhas individuais, associando cada valor ao seu respectivo chiller./ Ordenação: A consulta final ordena os valores de KW_TR_Medio em ordem crescente./ Seleciona o menor valor: O LIMIT 1 retorna o menor KW/TR encontrado. Se quiser exibir o menor KW/TR para cada mês, basta remover o LIMIT 1 e utilizar uma função de ranking, como ROW_NUMBER().\n",
    "\n",
    "WITH DadosUnificados AS (\n",
    "    SELECT month, 'Chiller1' AS Chiller, KW_TR_Medio_Chiller1 AS KW_TR_Medio FROM KW_TR_Media_Por_Mes\n",
    "    UNION ALL\n",
    "    SELECT month, 'Chiller2', KW_TR_Medio_Chiller2 FROM KW_TR_Media_Por_Mes\n",
    "    UNION ALL\n",
    "    SELECT month, 'Chiller3', KW_TR_Medio_Chiller3 FROM KW_TR_Media_Por_Mes\n",
    ")\n",
    "SELECT month, Chiller, KW_TR_Medio\n",
    "FROM DadosUnificados\n",
    "ORDER BY KW_TR_Medio ASC\n",
    "LIMIT 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "implicitDf": true,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6c49ad36-5094-4b02-ab4f-b0c6bf99fc1a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>month</th><th>Chiller</th><th>KW_TR_Medio</th></tr></thead><tbody><tr><td>2025-01</td><td>Chiller2</td><td>1.0694212103484875</td></tr><tr><td>2025-02</td><td>Chiller3</td><td>0.9873906355027052</td></tr><tr><td>2025-03</td><td>Chiller3</td><td>0.8402722487155333</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "2025-01",
         "Chiller2",
         1.0694212103484875
        ],
        [
         "2025-02",
         "Chiller3",
         0.9873906355027052
        ],
        [
         "2025-03",
         "Chiller3",
         0.8402722487155333
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "month",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "Chiller",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "KW_TR_Medio",
         "type": "\"double\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%sql\n",
    "\n",
    "--Este código retorna o chiller com menor KW/TR para cada mês separadamente.\n",
    "\n",
    "WITH DadosUnificados AS (\n",
    "    SELECT month, 'Chiller1' AS Chiller, KW_TR_Medio_Chiller1 AS KW_TR_Medio FROM KW_TR_Media_Por_Mes\n",
    "    UNION ALL\n",
    "    SELECT month, 'Chiller2', KW_TR_Medio_Chiller2 FROM KW_TR_Media_Por_Mes\n",
    "    UNION ALL\n",
    "    SELECT month, 'Chiller3', KW_TR_Medio_Chiller3 FROM KW_TR_Media_Por_Mes\n",
    "),\n",
    "Ranking AS (\n",
    "    SELECT month, Chiller, KW_TR_Medio,\n",
    "           ROW_NUMBER() OVER (PARTITION BY month ORDER BY KW_TR_Medio ASC) AS rank\n",
    "    FROM DadosUnificados\n",
    ")\n",
    "SELECT month, Chiller, KW_TR_Medio\n",
    "FROM Ranking\n",
    "WHERE rank = 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6adbebc5-38d1-4057-bca0-1b64292d8af9",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-----------------+-----------------+-----------------+\n|  month|Media_kW_Chiller1|Media_kW_Chiller2|Media_kW_Chiller3|\n+-------+-----------------+-----------------+-----------------+\n|2025-01|           2446.7|          2319.12|          2228.55|\n|2025-02|           722.83|          2879.44|          2617.55|\n|2025-03|             83.1|          2456.52|          1633.01|\n+-------+-----------------+-----------------+-----------------+\n\n+--------------------+--------------------+-----------+\n|            database|           tableName|isTemporary|\n+--------------------+--------------------+-----------+\n|banco_de_dados_ef...|     eficiencia_hvac|      false|\n|banco_de_dados_ef...|  kw_tr_calc_por_dia|      false|\n|banco_de_dados_ef...| kw_tr_media_por_mes|      false|\n|banco_de_dados_ef...|media_consumo_kw_...|      false|\n+--------------------+--------------------+-----------+\n\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import functions as F\n",
    "\n",
    "# Carregar a tabela com os dados\n",
    "df = spark.sql(\"SELECT * FROM Banco_de_dados_eficiencia.Eficiencia_HVAC\")\n",
    "\n",
    "# Adicionar a coluna de mês a partir da coluna de data\n",
    "df_with_month = df.withColumn(\"month\", F.date_format(\"DATA\", \"yyyy-MM\"))\n",
    "\n",
    "# Calcular a média de consumo kW por mês para cada chiller, arredondando para 2 casas decimais\n",
    "df_media_kw = df_with_month.groupBy(\"month\").agg(\n",
    "    F.round(F.avg(\"kW_CHILLER1\"), 2).alias(\"Media_kW_Chiller1\"),\n",
    "    F.round(F.avg(\"kW_CHILLER2\"), 2).alias(\"Media_kW_Chiller2\"),\n",
    "    F.round(F.avg(\"kW_CHILLER3\"), 2).alias(\"Media_kW_Chiller3\")\n",
    ")\n",
    "\n",
    "# Exibir os primeiros resultados para verificar\n",
    "df_media_kw.show(10)\n",
    "\n",
    "# Salvar a tabela com as médias no banco de dados\n",
    "df_media_kw.write.mode(\"overwrite\").saveAsTable(\"Banco_de_dados_eficiencia.Media_Consumo_KW_Chillers\")\n",
    "\n",
    "# Verificar se a tabela foi criada com sucesso\n",
    "spark.sql(\"SHOW TABLES IN Banco_de_dados_eficiencia\").show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "28b282b8-12d6-4266-ae4f-d16073a329fc",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-------------------------+\n|  month|Media_Temperatura_Externa|\n+-------+-------------------------+\n|2025-01|                    30.07|\n|2025-02|                    32.74|\n|2025-03|                    30.12|\n+-------+-------------------------+\n\n+--------------------+--------------------+-----------+\n|            database|           tableName|isTemporary|\n+--------------------+--------------------+-----------+\n|banco_de_dados_ef...|     eficiencia_hvac|      false|\n|banco_de_dados_ef...|  kw_tr_calc_por_dia|      false|\n|banco_de_dados_ef...| kw_tr_media_por_mes|      false|\n|banco_de_dados_ef...|media_consumo_kw_...|      false|\n|banco_de_dados_ef...|media_temperatura...|      false|\n+--------------------+--------------------+-----------+\n\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import functions as F\n",
    "\n",
    "# Carregar a tabela com os dados\n",
    "df = spark.sql(\"SELECT * FROM Banco_de_dados_eficiencia.Eficiencia_HVAC\")\n",
    "\n",
    "# Adicionar a coluna de mês a partir da coluna de data\n",
    "df_with_month = df.withColumn(\"month\", F.date_format(\"DATA\", \"yyyy-MM\"))\n",
    "\n",
    "# Calcular a média da temperatura externa por mês, arredondando para 2 casas decimais\n",
    "df_media_temp = df_with_month.groupBy(\"month\").agg(\n",
    "    F.round(F.avg(\"TEMP_EXTERNA\"), 2).alias(\"Media_Temperatura_Externa\")\n",
    ")\n",
    "\n",
    "# Exibir os primeiros resultados para verificar\n",
    "df_media_temp.show(10)\n",
    "\n",
    "# Salvar a tabela com as médias no banco de dados\n",
    "df_media_temp.write.mode(\"overwrite\").saveAsTable(\"Banco_de_dados_eficiencia.Media_Temperatura_Externa_Por_Mes\")\n",
    "\n",
    "# Verificar se a tabela foi criada com sucesso\n",
    "spark.sql(\"SHOW TABLES IN Banco_de_dados_eficiencia\").show()\n"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "1"
   },
   "inputWidgetPreferences": null,
   "language": "python",
   "notebookMetadata": {
    "mostRecentlyExecutedCommandWithImplicitDF": {
     "commandId": 2864243643509431,
     "dataframes": [
      "_sqldf"
     ]
    },
    "pythonIndentUnit": 4
   },
   "notebookName": "MVP_ENGENHARIA_DE_DADOS",
   "widgets": {}
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
